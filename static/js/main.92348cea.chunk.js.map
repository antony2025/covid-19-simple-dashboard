{"version":3,"sources":["definitions.ts","components/header.component.tsx","country-codes.ts","business-logic/sort.model.ts","business-logic/data-processing.ts","components/stats-table.component.tsx","components/search-bar.component.tsx","components/global-stats.component.tsx","components/dashboard-page.container.tsx","components/graph-page.container.tsx","App.tsx","index.tsx"],"names":["SortOrder","HeaderComponent","lastUpdateTime","undefined","this","props","date","Date","toString","className","React","Component","countryCodesMap","Map","sortingMap","dataField","sortDirection","ASC","displayText","DESC","createCountryStatsMap","covidData","statsMap","statIndices","dimensions","forEach","dimension","index","set","getColumnName","name","metrics","getStatIndices","rows","row","countryIndex","get","Error","statObject","dataRow","statDataRow","day","country","region","deaths","cumDeaths","confirmed","cumConfirmed","percent","statIndex","statName","getStatObjectFromRawDataRow","countryCode","countryDataArray","push","filterAndSortCountryDataArray","filterText","sortKey","filteredDataArray","toLowerCase","startsWith","sortInfo","columnName","sortOrder","copyCountryDataArray","slice","sort","a","b","sortHelper","StatsTableComponent","filteredAndSortedRows","countryStats","tableRows","countryName","role","key","toLocaleString","toFixed","SearchBarComponent","handleSubmit","event","preventDefault","searchBox","document","getElementById","blur","handleFilterTextChange","onFilterTextChange","currentTarget","value","handleSortOrderChange","onSortOrderChange","sortOptions","onSubmit","aria-label","autoCorrect","id","maxLength","onChange","placeholder","type","GlobalStatsComponent","scope","globalData","DashboardPage","setState","state","parsedStatsData","global","GraphPage","App","data","countryStatsMap","parsedStats","fetch","then","response","json","console","log","lastUpdate","globalStats","parsedData","regional","countryLatestData","length","extractCountriesLatestData2","catch","error","msgElement","innerText","isDataLoaded","exact","path","component","to","href","rel","target","ReactDOM","render"],"mappings":"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","file":"static/js/main.92348cea.chunk.js","sourcesContent":["export type ColumnInfoType = {\n  name: string,\n  type: string,\n  dataType?: any\n};\n\nexport type CovidDataType = {\n  dimensions: Array<ColumnInfoType>,\n  metrics: Array<ColumnInfoType>,\n  rows: Array<Array<number | string>>\n};\n\nexport interface BaseStatDataRow {\n  deaths: number,\n  cumDeaths: number,\n  confirmed: number,\n  cumConfirmed: number,\n  percent: number\n};\n\nexport interface StatDataRow extends BaseStatDataRow {\n  [key: string]: any,\n  day: number,\n  country: string,\n  region: string,\n};\n\nexport type CovidParsedDataType = {\n  global: BaseStatDataRow,\n  regional: Map<string, BaseStatDataRow>,\n  country: Array<StatDataRow>\n};\n\nexport enum SortOrder {\n  ASC = 0,\n  DESC = 1\n};\n\nexport type SortOption = {\n  dataField: string,\n  sortDirection: number,\n  displayText: string\n};\n\n","import React from 'react';\nimport './header.component.scss';\n\n\ntype PropsType = {\n  date: number\n}\n\nexport class HeaderComponent extends React.Component<PropsType> {\n  render() {\n    const lastUpdateTime = this.props.date === undefined ? '' : new Date(this.props.date).toString();\n    return(\n      <header className=\"header\">\n        <h1 className=\"header__h1\">COVID-19 Simple Dashboard</h1>\n        <h2 className=\"header__h2\"><span>Last updated: {lastUpdateTime}</span><span>Data updated daily</span></h2>\n      </header>\n    );\n  }\n}\n\n","export const countryCodesMap = new Map([\n  [ 'AF', 'Afghanistan' ] ,\n  [ 'AL', 'Albania' ] ,\n  [ 'DZ', 'Algeria' ] ,\n  [ 'AS', 'American Samoa' ] ,\n  [ 'AD', 'Andorra' ] ,\n  [ 'AO', 'Angola' ] ,\n  [ 'AI', 'Anguilla' ] ,\n  [ 'AQ', 'Antarctica' ] ,\n  [ 'AG', 'Antigua and Barbuda' ] ,\n  [ 'AR', 'Argentina' ] ,\n  [ 'AM', 'Armenia' ] ,\n  [ 'AW', 'Aruba' ] ,\n  [ 'AU', 'Australia' ] ,\n  [ 'AT', 'Austria' ] ,\n  [ 'AZ', 'Azerbaijan' ] ,\n  [ 'BS', 'Bahamas (the)' ] ,\n  [ 'BH', 'Bahrain' ] ,\n  [ 'BD', 'Bangladesh' ] ,\n  [ 'BB', 'Barbados' ] ,\n  [ 'BY', 'Belarus' ] ,\n  [ 'BE', 'Belgium' ] ,\n  [ 'BZ', 'Belize' ] ,\n  [ 'BJ', 'Benin' ] ,\n  [ 'BM', 'Bermuda' ] ,\n  [ 'BT', 'Bhutan' ] ,\n  [ 'BO', 'Bolivia (Plurinational State of)' ] ,\n  [ 'BQ', 'Bonaire, Sint Eustatius and Saba' ] ,\n  [ 'BA', 'Bosnia and Herzegovina' ] ,\n  [ 'BW', 'Botswana' ] ,\n  [ 'BV', 'Bouvet Island' ] ,\n  [ 'BR', 'Brazil' ] ,\n  [ 'IO', 'British Indian Ocean Territory (the)' ] ,\n  [ 'BN', 'Brunei Darussalam' ] ,\n  [ 'BG', 'Bulgaria' ] ,\n  [ 'BF', 'Burkina Faso' ] ,\n  [ 'BI', 'Burundi' ] ,\n  [ 'CV', 'Cabo Verde' ] ,\n  [ 'KH', 'Cambodia' ] ,\n  [ 'CM', 'Cameroon' ] ,\n  [ 'CA', 'Canada' ] ,\n  [ 'KY', 'Cayman Islands (the)' ] ,\n  [ 'CF', 'Central African Republic (the)' ] ,\n  [ 'TD', 'Chad' ] ,\n  [ 'CL', 'Chile' ] ,\n  [ 'CN', 'China' ] ,\n  [ 'CX', 'Christmas Island' ] ,\n  [ 'CC', 'Cocos (Keeling) Islands (the)' ] ,\n  [ 'CO', 'Colombia' ] ,\n  [ 'KM', 'Comoros (the)' ] ,\n  [ 'CD', 'Congo (the Democratic Republic of the)' ] ,\n  [ 'CG', 'Congo (the)' ] ,\n  [ 'CK', 'Cook Islands (the)' ] ,\n  [ 'CR', 'Costa Rica' ] ,\n  [ 'HR', 'Croatia' ] ,\n  [ 'CU', 'Cuba' ] ,\n  [ 'CW', 'Curaçao' ] ,\n  [ 'CY', 'Cyprus' ] ,\n  [ 'CZ', 'Czechia' ] ,\n  [ 'CI', \"Côte d'Ivoire\" ] ,\n  [ 'DK', 'Denmark' ] ,\n  [ 'DJ', 'Djibouti' ] ,\n  [ 'DM', 'Dominica' ] ,\n  [ 'DO', 'Dominican Republic (the)' ] ,\n  [ 'EC', 'Ecuador' ] ,\n  [ 'EG', 'Egypt' ] ,\n  [ 'SV', 'El Salvador' ] ,\n  [ 'GQ', 'Equatorial Guinea' ] ,\n  [ 'ER', 'Eritrea' ] ,\n  [ 'EE', 'Estonia' ] ,\n  [ 'SZ', 'Eswatini' ] ,\n  [ 'ET', 'Ethiopia' ] ,\n  [ 'FK', 'Falkland Islands (the) [Malvinas]' ] ,\n  [ 'FO', 'Faroe Islands (the)' ] ,\n  [ 'FJ', 'Fiji' ] ,\n  [ 'FI', 'Finland' ] ,\n  [ 'FR', 'France' ] ,\n  [ 'GF', 'French Guiana' ] ,\n  [ 'PF', 'French Polynesia' ] ,\n  [ 'TF', 'French Southern Territories (the)' ] ,\n  [ 'GA', 'Gabon' ] ,\n  [ 'GM', 'Gambia (the)' ] ,\n  [ 'GE', 'Georgia' ] ,\n  [ 'DE', 'Germany' ] ,\n  [ 'GH', 'Ghana' ] ,\n  [ 'GI', 'Gibraltar' ] ,\n  [ 'GR', 'Greece' ] ,\n  [ 'GL', 'Greenland' ] ,\n  [ 'GD', 'Grenada' ] ,\n  [ 'GP', 'Guadeloupe' ] ,\n  [ 'GU', 'Guam' ] ,\n  [ 'GT', 'Guatemala' ] ,\n  [ 'GG', 'Guernsey' ] ,\n  [ 'GN', 'Guinea' ] ,\n  [ 'GW', 'Guinea-Bissau' ] ,\n  [ 'GY', 'Guyana' ] ,\n  [ 'HT', 'Haiti' ] ,\n  [ 'HM', 'Heard Island and McDonald Islands' ] ,\n  [ 'VA', 'Holy See (the)' ] ,\n  [ 'HN', 'Honduras' ] ,\n  [ 'HK', 'Hong Kong' ] ,\n  [ 'HU', 'Hungary' ] ,\n  [ 'IS', 'Iceland' ] ,\n  [ 'IN', 'India' ] ,\n  [ 'ID', 'Indonesia' ] ,\n  [ 'IR', 'Iran (Islamic Republic of)' ] ,\n  [ 'IQ', 'Iraq' ] ,\n  [ 'IE', 'Ireland' ] ,\n  [ 'IM', 'Isle of Man' ] ,\n  [ 'IL', 'Israel' ] ,\n  [ 'IT', 'Italy' ] ,\n  [ 'JM', 'Jamaica' ] ,\n  [ 'JP', 'Japan' ] ,\n  [ 'JE', 'Jersey' ] ,\n  [ 'JO', 'Jordan' ] ,\n  [ 'KZ', 'Kazakhstan' ] ,\n  [ 'KE', 'Kenya' ] ,\n  [ 'KI', 'Kiribati' ] ,\n  [ 'KP', \"Korea (the Democratic People's Republic of)\" ] ,\n  [ 'KR', 'Korea (the Republic of)' ] ,\n  [ 'KW', 'Kuwait' ] ,\n  [ 'KG', 'Kyrgyzstan' ] ,\n  [ 'LA', \"Lao People's Democratic Republic (the)\" ] ,\n  [ 'LV', 'Latvia' ] ,\n  [ 'LB', 'Lebanon' ] ,\n  [ 'LS', 'Lesotho' ] ,\n  [ 'LR', 'Liberia' ] ,\n  [ 'LY', 'Libya' ] ,\n  [ 'LI', 'Liechtenstein' ] ,\n  [ 'LT', 'Lithuania' ] ,\n  [ 'LU', 'Luxembourg' ] ,\n  [ 'MO', 'Macao' ] ,\n  [ 'MG', 'Madagascar' ] ,\n  [ 'MW', 'Malawi' ] ,\n  [ 'MY', 'Malaysia' ] ,\n  [ 'MV', 'Maldives' ] ,\n  [ 'ML', 'Mali' ] ,\n  [ 'MT', 'Malta' ] ,\n  [ 'MH', 'Marshall Islands (the)' ] ,\n  [ 'MQ', 'Martinique' ] ,\n  [ 'MR', 'Mauritania' ] ,\n  [ 'MU', 'Mauritius' ] ,\n  [ 'YT', 'Mayotte' ] ,\n  [ 'MX', 'Mexico' ] ,\n  [ 'FM', 'Micronesia (Federated States of)' ] ,\n  [ 'MD', 'Moldova (the Republic of)' ] ,\n  [ 'MC', 'Monaco' ] ,\n  [ 'MN', 'Mongolia' ] ,\n  [ 'ME', 'Montenegro' ] ,\n  [ 'MS', 'Montserrat' ] ,\n  [ 'MA', 'Morocco' ] ,\n  [ 'MZ', 'Mozambique' ] ,\n  [ 'MM', 'Myanmar' ] ,\n  [ 'NA', 'Namibia' ] ,\n  [ 'NR', 'Nauru' ] ,\n  [ 'NP', 'Nepal' ] ,\n  [ 'NL', 'Netherlands (the)' ] ,\n  [ 'NC', 'New Caledonia' ] ,\n  [ 'NZ', 'New Zealand' ] ,\n  [ 'NI', 'Nicaragua' ] ,\n  [ 'NE', 'Niger (the)' ] ,\n  [ 'NG', 'Nigeria' ] ,\n  [ 'NU', 'Niue' ] ,\n  [ 'NF', 'Norfolk Island' ] ,\n  [ 'MP', 'Northern Mariana Islands (the)' ] ,\n  [ 'NO', 'Norway' ] ,\n  [ 'OM', 'Oman' ] ,\n  [ 'PK', 'Pakistan' ] ,\n  [ 'PW', 'Palau' ] ,\n  [ 'PS', 'Palestine, State of' ] ,\n  [ 'PA', 'Panama' ] ,\n  [ 'PG', 'Papua New Guinea' ] ,\n  [ 'PY', 'Paraguay' ] ,\n  [ 'PE', 'Peru' ] ,\n  [ 'PH', 'Philippines (the)' ] ,\n  [ 'PN', 'Pitcairn' ] ,\n  [ 'PL', 'Poland' ] ,\n  [ 'PT', 'Portugal' ] ,\n  [ 'PR', 'Puerto Rico' ] ,\n  [ 'QA', 'Qatar' ] ,\n  [ 'MK', 'Republic of North Macedonia' ] ,\n  [ 'RO', 'Romania' ] ,\n  [ 'RU', 'Russian Federation (the)' ] ,\n  [ 'RW', 'Rwanda' ] ,\n  [ 'RE', 'Réunion' ] ,\n  [ 'BL', 'Saint Barthélemy' ] ,\n  [ 'SH', 'Saint Helena, Ascension and Tristan da Cunha' ] ,\n  [ 'KN', 'Saint Kitts and Nevis' ] ,\n  [ 'LC', 'Saint Lucia' ] ,\n  [ 'MF', 'Saint Martin (French part)' ] ,\n  [ 'PM', 'Saint Pierre and Miquelon' ] ,\n  [ 'VC', 'Saint Vincent and the Grenadines' ] ,\n  [ 'WS', 'Samoa' ] ,\n  [ 'SM', 'San Marino' ] ,\n  [ 'ST', 'Sao Tome and Principe' ] ,\n  [ 'SA', 'Saudi Arabia' ] ,\n  [ 'SN', 'Senegal' ] ,\n  [ 'RS', 'Serbia' ] ,\n  [ 'SC', 'Seychelles' ] ,\n  [ 'SL', 'Sierra Leone' ] ,\n  [ 'SG', 'Singapore' ] ,\n  [ 'SX', 'Sint Maarten (Dutch part)' ] ,\n  [ 'SK', 'Slovakia' ] ,\n  [ 'SI', 'Slovenia' ] ,\n  [ 'SB', 'Solomon Islands' ] ,\n  [ 'SO', 'Somalia' ] ,\n  [ 'ZA', 'South Africa' ] ,\n  [ 'GS', 'South Georgia and the South Sandwich Islands' ] ,\n  [ 'SS', 'South Sudan' ] ,\n  [ 'ES', 'Spain' ] ,\n  [ 'LK', 'Sri Lanka' ] ,\n  [ 'SD', 'Sudan (the)' ] ,\n  [ 'SR', 'Suriname' ] ,\n  [ 'SJ', 'Svalbard and Jan Mayen' ] ,\n  [ 'SE', 'Sweden' ] ,\n  [ 'CH', 'Switzerland' ] ,\n  [ 'SY', 'Syrian Arab Republic' ] ,\n  [ 'TW', 'Taiwan (Province of China)' ] ,\n  [ 'TJ', 'Tajikistan' ] ,\n  [ 'TZ', 'Tanzania, United Republic of' ] ,\n  [ 'TH', 'Thailand' ] ,\n  [ 'TL', 'Timor-Leste' ] ,\n  [ 'TG', 'Togo' ] ,\n  [ 'TK', 'Tokelau' ] ,\n  [ 'TO', 'Tonga' ] ,\n  [ 'TT', 'Trinidad and Tobago' ] ,\n  [ 'TN', 'Tunisia' ] ,\n  [ 'TR', 'Turkey' ] ,\n  [ 'TM', 'Turkmenistan' ] ,\n  [ 'TC', 'Turks and Caicos Islands (the)' ] ,\n  [ 'TV', 'Tuvalu' ] ,\n  [ 'UG', 'Uganda' ] ,\n  [ 'UA', 'Ukraine' ] ,\n  [ 'AE', 'United Arab Emirates (the)' ] ,\n  [ 'GB', 'United Kingdom of Great Britain and Northern Ireland (the)' ] ,\n  [ 'UM', 'United States Minor Outlying Islands (the)' ] ,\n  [ 'US', 'United States of America - USA (the)' ] ,\n  [ 'UY', 'Uruguay' ] ,\n  [ 'UZ', 'Uzbekistan' ] ,\n  [ 'VU', 'Vanuatu' ] ,\n  [ 'VE', 'Venezuela (Bolivarian Republic of)' ] ,\n  [ 'VN', 'Viet Nam' ] ,\n  [ 'VG', 'Virgin Islands (British)' ] ,\n  [ 'VI', 'Virgin Islands (U.S.)' ] ,\n  [ 'WF', 'Wallis and Futuna' ] ,\n  [ 'EH', 'Western Sahara' ] ,\n  [ 'YE', 'Yemen' ] ,\n  [ 'ZM', 'Zambia' ] ,\n  [ 'ZW', 'Zimbabwe' ] ,\n  [ 'AX', 'Åland Islands' ] ,\n]);\n\n","import { SortOrder } from 'definitions';\n\n\nexport const sortingMap = new Map([\n  ['1', {dataField: 'percent', sortDirection: SortOrder.ASC, displayText: 'Deaths Percentage: ascending'}],\n  ['2', {dataField: 'percent', sortDirection: SortOrder.DESC, displayText: 'Deaths Percentage: descending'}],\n  ['3', {dataField: 'cumDeaths', sortDirection: SortOrder.ASC, displayText: 'Cumulative Deaths: ascending'}],\n  ['4', {dataField: 'cumDeaths', sortDirection: SortOrder.DESC, displayText: 'Cumulative Deaths: descending'}],\n  ['5', {dataField: 'cumConfirmed', sortDirection: SortOrder.ASC, displayText: 'Cumulative Cases: ascending'}],\n  ['6', {dataField: 'cumConfirmed', sortDirection: SortOrder.DESC, displayText: 'Cumulative Cases: descending'}],\n  ['7', {dataField: 'deaths', sortDirection: SortOrder.ASC, displayText: 'New Deaths: ascending'}],\n  ['8', {dataField: 'deaths', sortDirection: SortOrder.DESC, displayText: 'New Deaths: descending'}],\n  ['9', {dataField: 'confirmed', sortDirection: SortOrder.ASC, displayText: 'New Cases: ascending'}],\n  ['10', {dataField: 'confirmed', sortDirection: SortOrder.DESC, displayText: 'New Cases: descending'}],\n]);\n\n","import { ColumnInfoType, CovidDataType, CovidParsedDataType, StatDataRow, SortOrder } from 'definitions';\nimport { countryCodesMap } from 'country-codes';\nimport { sortingMap } from 'business-logic/sort.model';\n\nexport function createCountryStatsMap(covidData: CovidDataType): Map<string, Array<StatDataRow>> {\n  const statsMap: Map<string, Array<StatDataRow>> = new Map();\n  const statIndices = getStatIndices(covidData);\n\n  covidData.rows.forEach((row) => {\n    const countryIndex = statIndices.get('country');\n    if (countryIndex === undefined) {\n      throw new Error('Country index does not exist in indices map');\n    }\n\n    const statObject = getStatObjectFromRawDataRow(row, statIndices);\n    const countryCode: string = row[countryIndex] as string;\n\n    const countryDataArray = statsMap.get(countryCode);\n    if (countryDataArray === undefined) {\n      statsMap.set(countryCode, [statObject]);\n    } else {\n      countryDataArray.push(statObject);\n    }\n  });\n  return statsMap;\n}\n\nexport function extractCountriesLatestData(statsMap: Map<string, Array<StatDataRow>>): Array<StatDataRow> {\n  const latestDataArray: Array<StatDataRow> = [];\n  statsMap.forEach((value, key) => {\n    const countryLatestData = value[value.length - 1];\n    countryLatestData.percent = (countryLatestData.cumDeaths / countryLatestData.cumConfirmed) * 100;\n    latestDataArray.push(countryLatestData);\n  });\n  return latestDataArray;\n}\n\nexport function extractCountriesLatestData2(statsMap: Map<string, Array<StatDataRow>>): CovidParsedDataType {\n  const globalStats = { deaths: 0, cumDeaths: 0, confirmed: 0, cumConfirmed: 0, percent: 0};\n  const parsedData: CovidParsedDataType = {\n    global: globalStats,\n    regional: new Map(),\n    country: []\n  };\n\n  statsMap.forEach((value, key) => {\n    const countryLatestData = value[value.length - 1];\n    countryLatestData.percent = (countryLatestData.cumDeaths / countryLatestData.cumConfirmed) * 100;\n    parsedData.country.push(countryLatestData);\n    globalStats.deaths += countryLatestData.deaths;\n    globalStats.cumDeaths += countryLatestData.cumDeaths;\n    globalStats.confirmed += countryLatestData.confirmed;\n    globalStats.cumConfirmed += countryLatestData.cumConfirmed;\n  });\n  globalStats.percent = (globalStats.cumDeaths / globalStats.cumConfirmed) * 100;\n  return parsedData;\n}\n\nexport function filterAndSortCountryDataArray(countryDataArray: Array<StatDataRow>, filterText: string, sortKey: string) {\n  let filteredDataArray: Array<StatDataRow> = [];\n  if (filterText === '') {\n    filteredDataArray = countryDataArray;\n  } else {\n    countryDataArray.forEach((row: StatDataRow) => {\n      const countryName = countryCodesMap.get(row.country) || row.country;\n      if (!countryName.toLowerCase().startsWith(filterText.toLowerCase())) {\n        return;\n      }\n      filteredDataArray.push(row);\n    });\n  }\n\n  const sortInfo = sortingMap.get(sortKey);\n  if (!sortInfo) {\n    throw new Error(`Sort key ${sortKey} not found in sorting map.`);\n  }\n  return sortHelper(filteredDataArray, sortInfo.dataField, sortInfo.sortDirection);\n}\n\nexport function getStatIndices(covidData: CovidDataType): Map<string, number> {\n  const statIndices = new Map();\n  covidData.dimensions.forEach((dimension: ColumnInfoType, index: number) => statIndices.set(getColumnName(dimension.name), index));\n  covidData.metrics.forEach((metrics: ColumnInfoType, index: number) => statIndices.set(getColumnName(metrics.name), index + 3));\n  return statIndices;\n}\n\nexport function getStatObjectFromRawDataRow(dataRow: (string | number)[], statIndices: Map<string, number>): StatDataRow {\n  let statDataRow: StatDataRow = { day: 0, country: '', region: '', deaths: 0, cumDeaths: 0, confirmed: 0, cumConfirmed: 0, percent: 0 };\n  statIndices.forEach((statIndex, statName) => (statDataRow[statName] = dataRow[statIndex]));\n  return statDataRow;\n}\n\nexport function sortHelper(countryDataArray: Array<StatDataRow>, columnName: string, sortOrder = SortOrder.ASC) {\n  const copyCountryDataArray = countryDataArray.slice();\n  copyCountryDataArray.sort((a: StatDataRow, b: StatDataRow): number => {\n    if (sortOrder === SortOrder.ASC) {\n      return a[columnName] - b[columnName];\n    } else {\n      return b[columnName] - a[columnName];\n    }\n  });\n  return copyCountryDataArray;\n}\n\nfunction getColumnName(columnName: string) {\n  switch (columnName) {\n    case 'day':\n      return 'day';\n    case 'Country':\n      return 'country';\n    case 'Region':\n      return 'region';\n    case 'Deaths':\n      return 'deaths';\n    case 'Cumulative Deaths':\n      return 'cumDeaths';\n    case 'Confirmed':\n      return 'confirmed';\n    case 'Cumulative Confirmed':\n      return 'cumConfirmed';\n    default:\n      throw new Error('Unrecognized column name: ' + columnName);\n  }\n}\n","import React from 'react';\nimport './stats-table.component.scss';\nimport { StatDataRow } from 'definitions';\nimport { filterAndSortCountryDataArray } from 'business-logic/data-processing';\nimport { countryCodesMap } from 'country-codes';\n\n\ntype PropsType = {\n  countryStats: Array<StatDataRow>\n  filterText: string;\n  sortKey: string;\n}\n\nexport class StatsTableComponent extends React.Component<PropsType> {\n  render() {\n    const filteredAndSortedRows = filterAndSortCountryDataArray(this.props.countryStats, this.props.filterText, this.props.sortKey);\n    const tableRows: Array<any> = [];\n\n    filteredAndSortedRows.forEach((row: StatDataRow) => {\n      const countryName = countryCodesMap.get(row.country) || row.country;\n      tableRows.push(\n        <tr role=\"row\" className=\"country-table__row\" key={row.country}>\n          <td role=\"cell\" className=\"country-table__cell\">{countryName}</td>\n          <td role=\"cell\" className=\"country-table__cell\">{row.cumConfirmed.toLocaleString()}</td>\n          <td role=\"cell\" className=\"country-table__cell\">{row.cumDeaths.toLocaleString()}</td>\n          <td role=\"cell\" className=\"country-table__cell\">{row.confirmed.toLocaleString()}</td>\n          <td role=\"cell\" className=\"country-table__cell\">{row.deaths.toLocaleString()}</td>\n          <td role=\"cell\" className=\"country-table__cell\">{ row.percent === 0 ? '0' : row.percent.toFixed(2)}%</td>\n        </tr>\n      );\n    });\n\n    return(\n      <table role=\"table\" className=\"country-table\">\n        <caption className=\"country-table__caption\">Country Statistics</caption>\n        <thead className=\"country-table__thead\">\n          <tr role=\"row\" className=\"country-table__tr\">\n            <th role=\"columnheader\" className=\"country-table__th\">Country</th>\n            <th role=\"columnheader\" className=\"country-table__th\">Cumulative cases</th>\n            <th role=\"columnheader\" className=\"country-table__th\">Cumulative deaths</th>\n            <th role=\"columnheader\" className=\"country-table__th\">New cases</th>\n            <th role=\"columnheader\" className=\"country-table__th\">New deaths</th>\n            <th role=\"columnheader\" className=\"country-table__th\">Percent cumulative deaths / cases</th>\n          </tr>\n        </thead>\n        <tbody className=\"country-table__tbody\">\n          {tableRows}\n        </tbody>\n      </table>\n    );\n  }\n}\n\n","import React from 'react';\nimport { sortingMap } from 'business-logic/sort.model';\nimport { SortOption } from 'definitions';\nimport './search-bar.component.scss';\n\ntype PropsType = {\n  filterText: string;\n  onFilterTextChange: Function;\n  onSortOrderChange: Function;\n};\n\nexport class SearchBarComponent extends React.Component<PropsType> {\n  handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const searchBox = document.getElementById('search-box');\n    if (searchBox) {\n      searchBox.blur();\n    }\n  };\n\n  handleFilterTextChange = (event: React.FormEvent<HTMLInputElement>) => {\n    this.props.onFilterTextChange(event.currentTarget.value);\n  };\n\n  handleSortOrderChange = (event: React.FormEvent<HTMLSelectElement>) => {\n    this.props.onSortOrderChange(event.currentTarget.value);\n  };\n\n  render() {\n    const sortOptions: Array<any> = [];\n    sortingMap.forEach((value: SortOption, key: string) => {\n      sortOptions.push(\n        <option key={key} value={key}>\n          {value.displayText}\n        </option>\n      );\n    });\n\n    return (\n      <form className=\"country-filter-form\" onSubmit={this.handleSubmit}>\n        <input\n          className=\"country-filter-form__input\"\n          aria-label=\"Filter by country name\"\n          autoCorrect=\"off\"\n          id=\"search-box\"\n          maxLength={20}\n          onChange={this.handleFilterTextChange}\n          placeholder=\"Search country...\"\n          type=\"search\"\n          value={this.props.filterText}\n        />\n        <label className=\"country-filter-form__sort-options-label\">\n          Sort By\n          <select className=\"country-filter-form__sort-options\" name=\"sort-order\" id=\"sort-order\" onChange={this.handleSortOrderChange}>\n            {sortOptions}\n          </select>\n        </label>\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport { BaseStatDataRow } from 'definitions';\nimport './global-stats.component.scss';\n\n\ntype PropsType = {\n  globalData: BaseStatDataRow;\n};\n\nexport class GlobalStatsComponent extends React.Component<PropsType> {\n\n  render() {\n    return (\n      <table role=\"table\" className=\"global-table\">\n        <caption className=\"global-table__caption\">Global Statistics</caption>\n        <tbody>\n          <tr className=\"global-table__row\">\n            <th scope=\"row\" className=\"global-table__th\">Cumulative cases</th>\n            <td role=\"cell\" className=\"global-table__cell\">{this.props.globalData.cumConfirmed.toLocaleString()}</td>\n          </tr>\n          <tr className=\"global-table__row\">\n            <th scope=\"row\" className=\"global-table__th\">Cumulative deaths</th>\n            <td className=\"global-table__cell\">{this.props.globalData.cumDeaths.toLocaleString()}</td>\n          </tr>\n          <tr className=\"global-table__row\">\n            <th scope=\"col\" className=\"global-table__th\">New cases</th>\n            <td className=\"global-table__cell\">{this.props.globalData.confirmed.toLocaleString()}</td>\n          </tr>\n          <tr className=\"global-table__row\">\n            <th scope=\"col\" className=\"global-table__th\">New deaths</th>\n            <td className=\"global-table__cell\">{this.props.globalData.deaths.toLocaleString()}</td>\n          </tr>\n          <tr className=\"global-table__row\">\n            <th scope=\"col\" className=\"global-table__th\">Percent cumulative deaths / cases</th>\n            <td className=\"global-table__cell\">{this.props.globalData.percent.toFixed(2)}%</td>\n          </tr>\n        </tbody>\n      </table>\n    );\n  }\n}\n\n","import React from 'react';\nimport { StatsTableComponent } from 'components/stats-table.component';\nimport { SearchBarComponent } from 'components/search-bar.component';\nimport { GlobalStatsComponent } from 'components/global-stats.component';\nimport { CovidParsedDataType } from 'definitions';\nimport './dashboard-page.container.scss';\n\ntype PropsType = {\n  parsedStatsData: CovidParsedDataType;\n};\n\ntype StateType = {\n  filterText: string;\n  sortKey: string;\n};\n\nexport class DashboardPage extends React.Component<PropsType, StateType> {\n  constructor(props: PropsType) {\n    super(props);\n    this.state = {\n      filterText: '',\n      sortKey: '1',\n    };\n  }\n\n  handleFilterTextChange = (filterText: string) => this.setState({ filterText });\n\n  handleSortOrderChange = (sortKey: string) => this.setState({ sortKey });\n\n  render() {\n    return (\n      <section className=\"dashboard\">\n        <GlobalStatsComponent globalData={this.props.parsedStatsData.global} />\n        <hr className=\"dashboard__section-divider\"/>\n        <SearchBarComponent\n          filterText={this.state.filterText}\n          onFilterTextChange={this.handleFilterTextChange}\n          onSortOrderChange={this.handleSortOrderChange}\n        />\n        <StatsTableComponent filterText={this.state.filterText} countryStats={this.props.parsedStatsData.country} sortKey={this.state.sortKey} />\n      </section>\n    );\n  }\n}\n","import React from 'react';\n\n\nexport class GraphPage extends React.Component {\n\n  render() {\n    return (\n      <div>\n        <h1>The Graph Page</h1>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport './App.scss';\nimport { HeaderComponent } from 'components/header.component';\nimport { DashboardPage } from 'components/dashboard-page.container';\nimport { GraphPage } from 'components/graph-page.container';\nimport { createCountryStatsMap, extractCountriesLatestData2 } from 'business-logic/data-processing';\n\ntype AppState = {\n  [key: string]: any;\n}\n\nclass App extends React.Component<any, AppState> {\n  constructor(props: object) {\n    super(props);\n    this.state = {\n      data: null,\n      countryStatsMap: null,\n      parsedStats: null\n    };\n  }\n  \n  componentDidMount() {\n    // fetch('sprinklr-0604.json')\n    fetch('https://dashboards-dev.sprinklr.com/data/9043/global-covid19-who-gis.json')\n    .then(response => response.json())\n    .then(data => {\n      console.log(data.lastUpdate);\n      const countryStatsMap = createCountryStatsMap(data);\n      const parsedStats = extractCountriesLatestData2(countryStatsMap);\n      this.setState({ data, countryStatsMap, parsedStats });\n    })\n    .catch(error => {\n      console.log('Error:', error);\n      const msgElement = document.getElementById(\"load-msg\");\n      if (msgElement !== null) {\n        msgElement.innerText = \"Error during data fetch. Try later or contact author.\";\n      }\n    });\n  }\n\n  render() {\n    const isDataLoaded = this.state.data !== null;\n    return (\n      <div className=\"App\">\n        <HeaderComponent date={this.state.data?.lastUpdateTime}/>\n        <div role=\"main\" className=\"main\">\n          {isDataLoaded ?\n            <Switch>\n              <Route exact path='/:countryCode' component={GraphPage} />\n              <Route exact path='/'>\n                <DashboardPage parsedStatsData={this.state.parsedStats} />\n              </Route>\n              <Route path='*'>\n                <Redirect to='/' />\n              </Route>\n            </Switch>\n          :\n            <p className=\"main__loading\" id=\"load-msg\">Data loading...</p>\n          }\n        </div>\n        <footer className=\"footer\">\n          <span>Data Source: </span>\n          <a href=\"https://covid19.who.int/\" rel=\"noreferrer noopener\" target=\"_blank\">https://covid19.who.int</a>\n          <span className=\"footer__optional-text\"> (World Health Organization)</span>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport './index.scss';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}